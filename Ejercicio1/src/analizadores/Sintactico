package analizadores; 
import java_cup.runtime.*;

import arbol.Imprimir;
import arbol.Declaracion;
import arbol.Asignacion;
import arbol.SentenciaIf;
import arbol.Instruccion;
import arbol.Operacion;
import arbol.Nodo.Tipo;
import arbol.TablaSimbolos;
import java.util.LinkedList;

parser code 
{:
    public LinkedList<Instruccion> AST;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  

    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:}


non terminal ini;
non terminal LinkedList<Instruccion> sentencias;
non terminal Instruccion instruccion;
non terminal Declaracion declaracion;
non terminal Asignacion asignacion;
non terminal Operacion exp;
non terminal Operacion exp_num;
non terminal Operacion exp_cad;
non terminal Operacion exp_bool;
non terminal Operacion exp_log;
non terminal Tipo tipo;
non terminal SentenciaIf sentenciaIf;

terminal String RIMPRIMIR, RNUMBER, RDECLARE, RSTRING, RBOOLEAN, RIF, RELSE;
terminal String RTRUE, RFALSE;
terminal String PTCOMA, PARIZQ, PARDER, LLAVEIZQ, LLAVEDER;
terminal String MAS, MENOS, POR, DIVISION, CONCAT;
terminal String MENORQUE, MENORIGUALQUE, MAYORQUE, MAYORIGUALQUE, DISTINTO, IGUAL, IGUALIGUAL;
terminal String ENTERO;
terminal String DECIMAL;
terminal String IDENTIFICADOR;
terminal String CADENA;
terminal String UMENOS;
terminal String RNOT;
terminal String RAND;
terminal String ROR;

precedence left CONCAT;
precedence left MAS,MENOS;
precedence left POR,DIVISION;
precedence left RAND, ROR;
precedence right UMENOS;
precedence right RNOT;

start with ini;

ini::=  sentencias :a{:parser.AST=a;:};

sentencias::=   sentencias:a instruccion:b {:RESULT=a; RESULT.add(b);:}
                | instruccion:a{:RESULT=new LinkedList<>(); RESULT.add(a);:};

instruccion::=    RIMPRIMIR PARIZQ exp:a PARDER PTCOMA  {:RESULT=new Imprimir(a);:}
                    |declaracion:a PTCOMA  {:RESULT=a;:}                
                    |asignacion:a PTCOMA   {:RESULT=a;:} 
                    |RIF PARIZQ exp:a PARDER LLAVEIZQ sentencias:b LLAVEDER  {:RESULT = new SentenciaIf(a,b);:} 
                    |RIF PARIZQ exp:a PARDER LLAVEIZQ sentencias:b LLAVEDER RELSE LLAVEIZQ sentencias:c LLAVEDER {:RESULT = new SentenciaIf(a,b,c);:}  
                    |error; 

declaracion ::= RDECLARE tipo:a  IDENTIFICADOR:b {:RESULT= new Declaracion(b,a); System.out.println("tipo "+a); :};

asignacion ::= IDENTIFICADOR:a IGUAL exp:b {:RESULT=new Asignacion(a, b);:};

exp ::=  exp_cad:a                  {:RESULT=a;:}
        |exp_bool:a                 {:RESULT=a;:}
        |exp_num:a                  {:RESULT=a;:}
        |exp_log:a                  {:RESULT=a;:}
;

exp_log ::= exp:a RAND exp:b  {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.AND);:}
            |exp:a ROR exp:b  {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.OR);:}
            |RNOT exp:b             {:RESULT = new Operacion(b, Operacion.Tipo_Operador.NOT);:}
;

exp_cad ::= exp_cad:a CONCAT exp:b  {:RESULT = new Operacion(a, b,Operacion.Tipo_Operador.CONCATENACION);:}
        |CADENA:a                   {:RESULT = new Operacion(a, Operacion.Tipo_Operador.CADENA);:}
;

exp_bool::= exp_num:a IGUALIGUAL exp_num:b      {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.IGUALIGUAL);:}
         |exp_num:a MAYORQUE exp_num:b          {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.MAYORQUE);:}
         |exp_num:a MENORQUE exp_num:b          {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.MENORQUE);:}
         |exp_num:a MENORIGUALQUE exp_num:b     {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.MENORIGUALQUE);:}
         |exp_num:a MAYORIGUALQUE exp_num:b     {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.MAYORIGUALQUE);:}
         |exp_num:a DISTINTO exp_num:b         {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.DISTINTO);:}
;


exp_num ::= exp_num:a MAS exp_num:b         {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.SUMA);:}
            |exp_num:a MENOS exp_num:b      {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.RESTA);:}
            |exp_num:a POR exp_num:b        {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.MULTIPLICACION);:}
            |exp_num:a DIVISION exp_num:b   {:RESULT = new Operacion(a, b, Operacion.Tipo_Operador.DIVISION);:}  
            |MENOS exp_num:a                {:RESULT = new Operacion(a, Operacion.Tipo_Operador.NEGATIVO);:} %prec UMENOS 
            |PARIZQ exp:a PARDER            {:RESULT = a;:}
            |ENTERO:a                       {:RESULT = new Operacion(new Double(a));:}
            |DECIMAL:a                      {:RESULT = new Operacion(new Double(a));:}
            |IDENTIFICADOR:a                {:RESULT = new Operacion(a,Operacion.Tipo_Operador.IDENTIFICADOR);:}
            |RTRUE:a                        {:RESULT = new Operacion(a,Operacion.Tipo_Operador.VERDADERO);:}
            |RFALSE:a                       {:RESULT = new Operacion(a,Operacion.Tipo_Operador.FALSO);:}
            ;

tipo ::= RNUMBER                      {:RESULT = Tipo.NUMERO;:}
        |RSTRING                      {:RESULT = Tipo.CADENA;:}
        |RBOOLEAN                     {:RESULT = Tipo.BOOLEANO;:}
;
